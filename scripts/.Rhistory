dist[j]<-length(a$vpath[[1]])-1
}
avg[i] = mean(dist)
stdev[i] = sd(dist)
}
print(avg)
print(stdev)
}
graph <- sample_gnp(10, 1/100)
degree.distribution(g)
myfunction(g, nodes = 10)
myfunction(g, nodes = 20)
graph <- sample_gnp(20, 1/100)
graph <- sample_gnp(20, 1/100)
library(igraph)
#library(netrw)
install_version("netrw", version = "0.9.1", repos = "http://cran.us.r-project.org"))
myfunction <- function(graph,nodes)
{
avg<-rep(NA,nodes)
stdev<-rep(NA,nodes)
for(i in (1:nodes))
{
r1 <- random_walk(graph, start = 1:vcount(graph), steps = nodes)
dist <- rep(NA,nodes)
for(j in (1:nodes))
{
#i = 9
#j = 20
#a <-shortest.paths(graph, v=r1[1,j], to=r1[i,j])
#sp[j]<-length(a$vpath[[1]])-1
a <-get.shortest.paths(graph, from=r1[1,j], to=r1[i,j])
dist[j]<-length(a$vpath[[1]])-1
}
avg[i] = mean(dist)
stdev[i] = sd(dist)
}
print(avg)
print(stdev)
}
graph <- sample_gnp(20, 1/100)
myfunction(graph, nodes = 20)
graph <- sample_gnp(50, 1/100)
myfunction(graph, nodes = 50)
plot(1:nodes,avg,type="line",xlab="Number of Steps",ylab="Average")
plot(1:nodes,stdev,type="line",xlab="Number of Steps",ylab="Standard Deviation")
graph <- sample_gnp(50, 1/100)
myfunction(graph, nodes = 5)
graph <- sample_gnp(1000, 1/100)
myfunction(graph, nodes = 50)
nodes
library(igraph)
#library(netrw)
install_version("netrw", version = "0.9.1", repos = "http://cran.us.r-project.org"))
myfunction <- function(graph,nodes)
{
avg<-rep(NA,nodes)
stdev<-rep(NA,nodes)
for(i in (1:nodes))
{
r1 <- random_walk(graph, start = 1:vcount(graph), steps = i)
dist <- rep(NA,nodes)
for(j in (1:nodes))
{
#i = 9
#j = 20
#a <-shortest.paths(graph, v=r1[1,j], to=r1[i,j])
#sp[j]<-length(a$vpath[[1]])-1
a <-get.shortest.paths(graph, from=r1[1,j], to=r1[i,j])
dist[j]<-length(a$vpath[[1]])-1
}
avg[i] = mean(dist)
stdev[i] = sd(dist)
}
print(avg)
print(stdev)
}
graph <- sample_gnp(100, 1/100)
myfunction(graph, nodes = 50)
library(igraph)
#library(netrw)
install_version("netrw", version = "0.9.1", repos = "http://cran.us.r-project.org"))
myfunction <- function(graph,nodes)
{
avg<-rep(NA,nodes)
stdev<-rep(NA,nodes)
for(i in (1:nodes))
{
r1 <- random_walk(graph, start = 1:vcount(graph), steps = nodes)
dist <- rep(NA,nodes)
for(j in (1:nodes))
{
#i = 9
#j = 20
#a <-shortest.paths(graph, v=r1[1,j], to=r1[i,j])
#sp[j]<-length(a$vpath[[1]])-1
a <-get.shortest.paths(graph, from=r1[1,j], to=r1[i,j])
dist[j]<-length(a$vpath[[1]])-1
}
avg[i] = mean(dist)
stdev[i] = sd(dist)
}
print(avg)
print(stdev)
}
graph <- sample_gnp(100, 1/100)
myfunction(graph, nodes = 50)
graph <- sample_gnp(100, 1/100)
myfunction(graph, nodes = 100)
myfunction <- function(graph,nodes)
{
avg<-rep(NA,nodes)
stdev<-rep(NA,nodes)
for(i in (1:nodes))
{
r1 <- random_walk(graph, start = 1:vcount(graph), steps = nodes)
dist <- rep(NA,nodes)
for(j in (1:nodes))
{
#i = 9
#j = 20
#a <-shortest.paths(graph, v=r1[1,j], to=r1[i,j])
#sp[j]<-length(a$vpath[[1]])-1
a <-get.shortest.paths(graph, from=r1[1,j], to=r1[i,j])
dist[j]<-length(a$vpath[[1]])-1
}
avg[i] = mean(dist)
stdev[i] = sd(dist)
}
print(avg)
print(stdev)
}
graph <- sample_gnp(20, 1/100)
myfunction(graph, nodes = 10)
myfunction <- function(graph,nodes)
{
print(nodes)
avg<-rep(NA,nodes)
stdev<-rep(NA,nodes)
for(i in (1:nodes))
{
r1 <- random_walk(graph, start = 1:vcount(graph), steps = nodes)
dist <- rep(NA,nodes)
for(j in (1:nodes))
{
#i = 9
#j = 20
#a <-shortest.paths(graph, v=r1[1,j], to=r1[i,j])
#sp[j]<-length(a$vpath[[1]])-1
a <-get.shortest.paths(graph, from=r1[1,j], to=r1[i,j])
dist[j]<-length(a$vpath[[1]])-1
}
avg[i] = mean(dist)
stdev[i] = sd(dist)
}
print(avg)
print(stdev)
}
graph <- sample_gnp(20, 1/100)
myfunction(graph, nodes = 10)
myfunction <- function(graph,nodes)
{
for(i in (1:nodes))
{
dists = numeric()
r1 <- random_walk(graph, start = 1:vcount(graph), steps = nodes)
dist <- rep(NA,nodes)
for (j in 1:walkNum) {
dist = shortest.paths(g, v = r1[1, j], to = r1[i, j])
if (dist == Inf)
dist = 0
dists = c(dists, dist)
}
avg = c(avg, mean(dists))
std = c(std, sd(dists))
}
print(avg)
print(stdev)
}
myfunction(graph, nodes = 10)
myfunction <- function(graph,nodes)
{
for(i in (1:10))
{
dists = numeric()
r1 <- random_walk(graph, start = 1:vcount(graph), steps = nodes)
dist <- rep(NA,nodes)
for (j in 1:nodes) {
dist = shortest.paths(g, v = r1[1, j], to = r1[i, j])
if (dist == Inf)
dist = 0
dists = c(dists, dist)
}
avg = c(avg, mean(dists))
std = c(std, sd(dists))
}
print(avg)
print(stdev)
}
graph <- sample_gnp(20, 1/100)
myfunction(graph, nodes = 10)
library(igraph)
#library(netrw)
install_version("netrw", version = "0.9.1", repos = "http://cran.us.r-project.org"))
myfunction <- function(graph,nodes)
{
for(i in (1:10))
{
dists = numeric()
r1 <- random_walk(graph, start = 1:vcount(graph), steps = nodes)
dist <- rep(NA,nodes)
for (j in 1:nodes) {
dist = shortest.paths(graph, v = r1[1, j], to = r1[i, j])
if (dist == Inf)
dist = 0
dists = c(dists, dist)
}
avg = c(avg, mean(dists))
std = c(std, sd(dists))
}
print(avg)
print(stdev)
}
graph <- sample_gnp(20, 1/100)
myfunction(graph, nodes = 10)
require(netrw)
r1 <- random_walk(graph, start = 1:vcount(graph), steps = nodes)
r1
vcount(graph)
nodes
vcount(graph)
r1 <- random_walk(graph, start = 1:vcount(graph), steps = nodes)
r1
nodes = 10
r1 <- random_walk(graph, start = 1:vcount(graph), steps = nodes)
r1
1:vcount(graph)
r1 <- random_walk(graph, start = 1:vcount(graph), steps = nodes)
r1 <- random_walk(graph, start = 1:vcount(graph), steps = nodes)
r1
g <- random.graph.game(nodeNum[n], p = 0.01, direct = FALSE)
nodeNum = 1000
walkNum = 500
g <- random.graph.game(nodeNum, p = 0.01, direct = FALSE)
g
graph <- random.graph.game(100, 1/100)
graph <- random.graph.game(100, p = 0.01)
graph
myfunction(graph, nodes = 10)
r1 <- random_walk(graph, start = 1:vcount(graph), steps = nodes)
r1
graph <- random.graph.game(100, p = 0.01)
myfunction(graph, nodes = 10)
myfunction <- function(graph,nodes)
{
for(i in (1:10))
{
dists = numeric()
r1 <- random_walk(graph, start = 1:vcount(graph), steps = nodes)
dist <- rep(NA,nodes)
for(j in (1:nodes))
{
#i = 9
#j = 20
#a <-shortest.paths(graph, v=r1[1,j], to=r1[i,j])
#sp[j]<-length(a$vpath[[1]])-1
a <-get.shortest.paths(graph, from=r1[1,j], to=r1[i,j])
dist[j]<-length(a$vpath[[1]])-1
}
avg[i] = mean(dist)
stdev[i] = sd(dist)
}
print avg
print stdev
}
graph <- random.graph.game(100, p = 0.01)
myfunction(graph, nodes = 10)
r1 <- random_walk(graph, start = 1:vcount(graph), steps = nodes)
r1
#i = 9
i = 9
j = 20
a <-shortest.paths(graph, v=r1[1,j], to=r1[i,j])
require(igraph)
g=read.graph("../data/sorted_directed_net.txt",format = c("ncol"),weights='yes',directed=TRUE)
g=read.graph("/Users/DavidZhou/GDriveUCLA/Study/SP17/232E/hw3/data/sorted_directed_net.txt",format = c("ncol"),weights='yes',directed=TRUE)
is.connected(g)
cl=clusters(g)
gcc=induced.subgraph(g, which(cl$membership == which.max(cl$csize)))
edge_count<-ecount(gcc)
vertex_count<-vcount(gcc)
in_deg_dist=degree.distribution(gcc,mode='in')
out_deg_dist=degree.distribution(gcc,mode='out')
in_deg_dist
out_deg_dist
out_deg_dist[1:10]
in_deg_dist[1:10]
h <- hist(degree(gcc,mode='in'), breaks=seq(-0.5, by=1 , length.out=max(degree(gcc,mode='in'))+2),main="Histogram of In degree distribution")
h <- hist(degree(gcc,mode='in'), breaks=seq(-0.5, by=1 , length.out=max(degree(gcc,mode='in'))+2),main="Histogram of In degree distribution")
plot(in_deg_dist,main="In degree distribution",xlab="degree",ylab="density")
plot(in_deg_dist,main="In degree distribution",xlab="degree",ylab="density")
lines(in_deg_dist)
h <- hist(degree(gcc,mode='out'), breaks=seq(-0.5, by=1 , length.out=max(degree(gcc,mode='out'))+2),main="Histogram of out degree distribution")
plot(out_deg_dist,main="Out degree distribution",xlab="degree",ylab="density")
lines(out_deg_dist)
h <- hist(degree(gcc,mode='in'), breaks=seq(-0.5, by=1 , length.out=max(degree(gcc,mode='in'))+2),main="Histogram of In degree distribution")
plot(out_deg_dist,main="Out degree distribution",xlab="degree",ylab="density")
h <- hist(degree(gcc,mode='in'), breaks=seq(-0.5, by=1 , length.out=max(degree(gcc,mode='in'))+2),main="Histogram of In degree distribution")
h <- hist(degree(gcc,mode='out'), breaks=seq(-0.5, by=1 , length.out=max(degree(gcc,mode='out'))+2),main="Histogram of out degree distribution")
plot(in_deg_dist,main="In degree distribution",xlab="degree",ylab="density")
plot(out_deg_dist,main="Out degree distribution",xlab="degree",ylab="density")
library('igraph')
filePath = "/Users/DavidZhou/ucla-13s-ee232e/proj1/facebook_combined.txt"
g = read.graph(file = filePath,directed=FALSE)
g = read.graph(file = filePath,directed=FALSE)
g = read.graph(file = filePath,directed=FALSE, format="ncol")
library(myTAI)
taxonomy( organism = "Staphylococcus phage 80alpha",
db       = "ncbi",
output   = "classification" )
pwd
getwd()
setwd('/Users/DavidZhou/GDriveUCLA/Study/Research/MetaGenomic/MetaSUB/ny/scripts/')
species = read.table("../files/species_names_tree.txt")
species = read.table("../files/species_names_tree.txt", sep="\n")
species
taxonomy( organism = "Staphylococcus phage 80alpha",
library(myTAI)
setwd('/Users/DavidZhou/GDriveUCLA/Study/Research/MetaGenomic/MetaSUB/ny/scripts/')
library(myTAI)
setwd('/Users/DavidZhou/GDriveUCLA/Study/Research/MetaGenomic/MetaSUB/ny/scripts/')
species = read.table("../files/species_names_tree.txt", sep="\n")
species(1)
species[1]
species$V1
species$V1[1]
species$V1[2]
clear
taxonomy( organism = species$V1,
db       = "ncbi",
output   = "classification" )
taxonomy( organism = species$V1[:3],
db       = "ncbi",
output   = "classification"
taxonomy( organism = species$V1[:3],
db       = "ncbi",
output   = "classification" )
taxonomy( organism = species$V1[1:3],
db       = "ncbi",
output   = "classification" )
species$V1[1:3]
species[1:3]
species$V1[1:3]
species$V1
species$V1[1:10]
taxonomy( organism = species$V1[2:5],
db       = "ncbi",
output   = "classification"
output   = "classification" )
taxonomy( organism = species$V1[2:5],
db       = "ncbi",
output   = "classification" )
for (i in 1:length(species$V1)) {
species$V1[i]
}
for (i in 1:length(species$V1)) {
print(species$V1[i])
}
for (i in 1:length(species$V1)) {
print(species$V1[i][0])
break
}
for (i in 1:length(species$V1)) {
print(species$V1[i])
break
}
for (i in 1:length(species$V1)) {
print(species$V1[i])
taxonomy( organism = species$V1[i],
db       = "ncbi",
output   = "classification" )
break
}
for (i in 1:length(species$V1)) {
print(species$V1[i])
a = taxonomy( organism = species$V1[i],
db       = "ncbi",
output   = "classification" )
print(a)
break
}
for (i in 1:length(species$V1)) {
print(species$V1[i])
a = taxonomy( organism = species$V1[i],
db       = "ncbi",
output   = "classification" )
print(a['rank'])
break
}
for (i in 1:length(species$V1)) {
print(species$V1[i])
a = taxonomy( organism = species$V1[i],
db       = "ncbi",
output   = "classification" )
print(a[a$rank == genus])
break
}
for (i in 1:length(species$V1)) {
print(species$V1[i])
a = taxonomy( organism = species$V1[i],
db       = "ncbi",
output   = "classification" )
print(a[a$rank == 'genus'])
break
}
for (i in 1:length(species$V1)) {
print(species$V1[i])
a = taxonomy( organism = species$V1[i],
db       = "ncbi",
output   = "classification" )
print(a$rank)
print(a[a$rank == 'genus'])
break
}
for (i in 1:length(species$V1)) {
print(species$V1[i])
a = taxonomy( organism = species$V1[i],
db       = "ncbi",
output   = "classification" )
print(a$rank)
print(a[a$rank == 'genus'],)
break
}
for (i in 1:length(species$V1)) {
print(species$V1[i])
a = taxonomy( organism = species$V1[i],
db       = "ncbi",
output   = "classification" )
print(a$rank)
#print(a[a$rank == 'genus'],)
subset(a, rank == "genus")
break
}
for (i in 1:length(species$V1)) {
print(species$V1[i])
a = taxonomy( organism = species$V1[i],
db       = "ncbi",
output   = "classification" )
print(a$rank)
#print(a[a$rank == 'genus'],)
print(subset(a, rank == "genus"))
break
}
for (i in 1:length(species$V1)) {
print(species$V1[i])
a = taxonomy( organism = species$V1[i],
db       = "ncbi",
output   = "classification" )
print(a$rank)
#print(a[a$rank == 'genus'],)
print(subset(a, rank == "genus"))
break
}
retrieve <- function(){
for (i in 1:10) {
print(species$V1[i])
a = taxonomy( organism = species$V1[i],
db       = "ncbi",
output   = "classification" )
print(a$rank)
#print(a[a$rank == 'genus'],)
print(subset(a, rank == "genus"))
}
}
retrieve()
retrieve <- function(){
for (i in 1:10) {
print(species$V1[i])
a = taxonomy( organism = species$V1[i],
db       = "ncbi",
output   = "classification" )
print(a$rank)
#print(a[a$rank == 'genus'],)
print(subset(a, rank == "species"))
}
}
retrieve()
retrieve <- function(){
for (i in 1:3) {
#print(species$V1[i])
a = taxonomy( organism = species$V1[i],
db       = "ncbi",
output   = "classification" )
#print(a$rank)
#print(a[a$rank == 'genus'],)
print(i, subset(a, rank == "species"))
}
}
retrieve()
retrieve <- function(){
for (i in 1:3) {
#print(species$V1[i])
a = taxonomy( organism = species$V1[i],
db       = "ncbi",
output   = "classification" )
#print(a$rank)
#print(a[a$rank == 'genus'],)
print(i)
print(subset(a, rank == "species"))
}
}
retrieve()
